{"version":3,"sources":["Alert.js","NumberOfEvents.js","mock-events.js","api.js","CitySearch.js","Event.js","EventList.js","App.js","serviceWorker.js","index.js"],"names":["Alert","props","getStyle","color","className","style","this","text","Component","InfoAlert","ErrorAlert","NumberOfEvents","state","numberOfEvents","errorText","handleInputChanged","event","value","target","setState","updateEvents","type","id","onChange","mockEvents","created","duration","name","rsvp_limit","date_in_series_pattern","status","time","local_date","local_time","updated","utc_offset","waitlist_count","yes_rsvp_count","venue","lat","lon","repinned","address_1","city","country","localized_country_name","group","join_mode","urlname","who","localized_location","region","timezone","link","description","visibility","member_pay_fee","getAccessToken","a","accessToken","localStorage","getItem","searchParams","URLSearchParams","window","location","search","code","get","href","getOrRenewAccessToken","lastSavedTime","Date","now","refreshToken","key","url","axios","tokenInfo","setItem","data","access_token","refresh_token","query","startsWith","name_string","zip","token","result","getEvents","events","CitySearch","getSuggestions","then","suggestions","length","infoText","handleItemClicked","map","item","onClick","Event","showDetails","handleShowDetails","EventList","App","page","defaultCity","response","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f081ac86.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Alert extends Component {\n  constructor(props) {\n    super(props);\n    this.color = null;\n  }\n\n  getStyle = () => {\n    return { color: this.color };\n  };\n\n  render() {\n    return (\n      <div className=\"Alert\">\n        <p style={this.getStyle()}>{this.props.text}</p>\n      </div>\n    );\n  }\n}\n\nexport class InfoAlert extends Alert {\n  constructor(props) {\n    super(props);\n    this.color = \"blue\";\n  }\n}\n\nexport class ErrorAlert extends Alert {\n  constructor(props) {\n    super(props);\n    this.color = \"red\";\n  }\n}\n","import React, { Component } from \"react\";\nimport { ErrorAlert } from \"./Alert\";\n\nclass NumberOfEvents extends Component {\n  state = {\n    numberOfEvents: 32,\n    errorText: \"\",\n  };\n\n  handleInputChanged = (event) => {\n    const value = event.target.value;\n    if (value < 1) this.setState({ errorText: \"Please enter a valid number\" });\n    else this.setState({ errorText: \"\" });\n    this.setState({ numberOfEvents: value });\n    this.props.updateEvents(null, null, value);\n  };\n\n  render() {\n    return (\n      <div className=\"numberOfEvents\">\n        <ErrorAlert text={this.state.errorText} />\n        <label>Number of Events: </label>\n        <input\n          type=\"text\"\n          id=\"numberOfEvents__input\"\n          value={this.state.numberOfEvents}\n          onChange={this.handleInputChanged}\n        />\n      </div>\n    );\n  }\n}\n\nexport default NumberOfEvents;\n","const mockEvents = {\n    city: {\n      id: 1007700,\n      city: \"MÃ¼nchen\",\n      lat: 48.14,\n      lon: 11.58,\n      state: \"\",\n      country: \"de\",\n      zip: \"meetup3\",\n      member_count: 1257,\n    },\n    events: [\n      {\n        created: 1563825339000,\n        duration: 9000000,\n        id: \"263370107\",\n        name: \"Microservices mit dem MicroProfile 3.x\",\n        rsvp_limit: 80,\n        date_in_series_pattern: false,\n        status: \"upcoming\",\n        time: 1566925200000,\n        local_date: \"2019-08-27\",\n        local_time: \"19:00\",\n        updated: 1563825339000,\n        utc_offset: 7200000,\n        waitlist_count: 79,\n        yes_rsvp_count: 80,\n        venue: {\n          id: 26266792,\n          name: \"adesso AG\",\n          lat: 53.54524230957031,\n          lon: 9.950983047485352,\n          repinned: false,\n          address_1: \"GroÃe ElbstraÃe 36\",\n          city: \"Hamburg\",\n          country: \"de\",\n          localized_country_name: \"Deutschland\",\n        },\n        group: {\n          created: 1387402147000,\n          name: \"Java User Group Hamburg\",\n          id: 11500362,\n          join_mode: \"open\",\n          lat: 53.54999923706055,\n          lon: 10,\n          urlname: \"jug-hamburg\",\n          who: \"Mitglieder\",\n          localized_location: \"Hamburg, Deutschland\",\n          state: \"\",\n          country: \"de\",\n          region: \"de_DE\",\n          timezone: \"Europe/Berlin\",\n        },\n        link: \"https://www.meetup.com/de-DE/jug-hamburg/events/263370107/\",\n        description:\n          \"<p>Wer Microservices in Java entwickeln mÃ¶chte, muss nicht zwangslÃ¤ufig zu Spring Boot greifen. Es lohnt ein Blick auf alternative Frameworks, die in zunehmender Anzahl verfÃ¼gbar sind und bezÃ¼glich ihrer FunktionalitÃ¤t stark aufholen. So schreitet auch die Entwicklung des MicroProfiles weiter voran. In beeindruckender Geschwindigkeit wurden zahlreiche APIs entwickelt, die (nicht nur) fÃ¼r die Entwicklung von Microservices sehr hilfreich sind.<br/>Hierzu zÃ¤hlen die UnterstÃ¼tzung von Metriken, Health Checks, Fault Tolerance und JSON Web Tokens. FÃ¼r den Einsatz im Projekt kann aus unterschiedlichen Implementierungen wie TomEE, Thorntail oder OpenLiberty gewÃ¤hlt werden. In dieser Live-Coding-Session wird der praktische Einsatz von MicroProfile anhand eines Praxisbeispiels demonstriert.<br/> <br/> <br/>Referent:<br/>Thilo Frotscher arbeitet als freiberuflicher Softwarearchitekt und Trainer. Als Experte fÃ¼r Enterprise Java und Systemintegration unterstÃ¼tzt er seine Kunden Ã¼berwiegend durch Entwicklung, Reviews oder die DurchfÃ¼hrung von Schulungen. Thilo ist (Co-)Autor mehrerer BÃ¼cher in den Bereichen Java EE, (Web) Services und Systemintegration, hat zahlreiche Fachartikel verfasst und spricht regelmÃ¤Ãig auf Fachkonferenzen und Schulungsveranstaltungen oder bei Java User Groups.</p> \",\n        visibility: \"public\",\n        member_pay_fee: false,\n      },\n    ],\n  };\n  \n  export { mockEvents };","import axios from \"axios\";\nimport { mockEvents } from \"./mock-events\";\n\nasync function getAccessToken() {\n  const accessToken = localStorage.getItem(\"access_token\");\n\n  if (!accessToken) {\n    const searchParams = new URLSearchParams(window.location.search);\n    const code = searchParams.get(\"code\");\n\n    if (!code) {\n      window.location.href =\n        \"https://secure.meetup.com/oauth2/authorize?client_id=buc4j06kc0rfv311tfnstu1fc9&response_type=code&redirect_uri=https://sherindenzil.github.io/meetup/\";\n      return null;\n    }\n    return getOrRenewAccessToken(\"get\", code);\n  }\n\n  const lastSavedTime = localStorage.getItem(\"last_saved_time\");\n\n  if (accessToken && Date.now() - lastSavedTime < 3600000) {\n    return accessToken;\n  }\n\n  // If the access_token is expired, we try to renew it by using refresh_token\n  const refreshToken = localStorage.getItem(\"refresh_token\");\n  return getOrRenewAccessToken(\"renew\", refreshToken);\n}\n\nasync function getOrRenewAccessToken(type, key) {\n  let url;\n  if (type === \"get\") {\n    // Lambda endpoint to get token by code\n    url =\n      \"https://vjnp8zr06l.execute-api.us-east-2.amazonaws.com/dev/api/token/\" +\n      key;\n  } else if (type === \"renew\") {\n    // Lambda endpoint to get token by refresh_token\n    url =\n      \"https:vjnp8zr06l.execute-api.us-east-2.amazonaws.com/dev/api/refresh_token/\" +\n      key;\n  }\n\n  // Use Axios to make a GET request to the endpoint\n  const tokenInfo = await axios.get(url);\n\n  // Save tokens to localStorage together with a timestamp\n  localStorage.setItem(\"access_token\", tokenInfo.data.access_token);\n  localStorage.setItem(\"refresh_token\", tokenInfo.data.refresh_token);\n  localStorage.setItem(\"last_saved_time\", Date.now());\n\n  // Return the access_token\n  return tokenInfo.data.access_token;\n}\n\nasync function getSuggestions(query) {\n  if (window.location.href.startsWith(\"http://localhost\")) {\n    return [\n      {\n        city: \"Munich\",\n        country: \"de\",\n        localized_country_name: \"Germany\",\n        name_string: \"Munich, Germany\",\n        zip: \"meetup3\",\n        lat: 48.14,\n        lon: 11.58,\n      },\n      {\n        city: \"Munich\",\n        country: \"us\",\n        localized_country_name: \"USA\",\n        state: \"ND\",\n        name_string: \"Munich, North Dakota, USA\",\n        zip: \"58352\",\n        lat: 48.66,\n        lon: -98.85,\n      },\n    ];\n  }\n\n  const token = await getAccessToken();\n  if (token) {\n    const url =\n      \"https://api.meetup.com/find/locations?&sign=true&photo-host=public&query=\" +\n      query +\n      \"&access_token=\" +\n      token;\n    const result = await axios.get(url);\n    return result.data;\n  }\n  return [];\n}\n\nasync function getEvents(lat, lon) {\n  if (window.location.href.startsWith(\"http://localhost\")) {\n    return mockEvents.events;\n  }\n\n  const token = await getAccessToken();\n  if (token) {\n    let url =\n      \"https://api.meetup.com/find/upcoming_events?&sign=true&photo-host=public\" +\n      \"&access_token=\" +\n      token;\n    // lat, lon is optional; if you have a lat and lon, you can add them\n    if (lat && lon) {\n      url += \"&lat=\" + lat + \"&lon=\" + lon;\n    }\n    const result = await axios.get(url);\n    return result.data.events;\n  }\n}\nexport { getSuggestions, getEvents, getAccessToken };\n\n// import axios from \"axios\";\n// import { mockEvents } from \"./mock-events\";\n\n// async function getSuggestions(query) {\n//   if (window.location.href.startsWith(\"http://localhost\")) {\n//     return [\n//       {\n//         city: \"Munich\",\n//         country: \"de\",\n//         localized_country_name: \"Germany\",\n//         name_string: \"Munich, Germany\",\n//         zip: \"meetup3\",\n//         lat: 48.14,\n//         lon: 11.58,\n//       },\n//       {\n//         city: \"Munich\",\n//         country: \"us\",\n//         localized_country_name: \"USA\",\n//         state: \"ND\",\n//         name_string: \"Munich, North Dakota, USA\",\n//         zip: \"58352\",\n//         lat: 48.66,\n//         lon: -98.85,\n//       },\n//     ];\n//   }\n\n//   const token = await getAccessToken();\n\n//   if (token) {\n//     const url =\n//       \"https://api.meetup.com/find/locations?&sign=true&photo-host=public&query=\" +\n//       query +\n//       \"&access_token=\" +\n//       token;\n//     const result = await axios.get(url);\n//     return result.data;\n//   }\n\n//   return [];\n// }\n\n// async function getEvents(lat, lon, page) {\n//   if (window.location.href.startsWith(\"http://localhost\")) {\n//     return mockEvents.events;\n//   }\n\n//   const token = await getAccessToken();\n\n//   if (token) {\n//     let url =\n//       \"https://api.meetup.com/find/upcoming_events?&sign=true&photo-host=public\" +\n//       \"&access_token=\" +\n//       token;\n//     // lat, lon is optional; if you have a lat and lon, you can add them\n//     if (lat && lon) {\n//       url += \"&lat=\" + lat + \"&lon=\" + lon;\n//     }\n//     if (page) {\n//       url += \"&page=\" + page;\n//     }\n//     if (lat && lon && page) {\n//       url += \"&lat=\" + lat + \"&lon=\" + lon + \"&page=\" + page;\n//     }\n//     const result = await axios.get(url);\n//     const events = result.data.events;\n//     return events;\n//   }\n// }\n\n// function getAccessToken() {\n//   const accessToken = localStorage.getItem(\"access_token\");\n\n//   if (!accessToken) {\n//     const searchParams = new URLSearchParams(window.location.search);\n//     const code = searchParams.get(\"code\");\n\n//     if (!code) {\n//       window.location.href =\n//         \"https://secure.meetup.com/oauth2/authorize?client_id=lrlpvmncurd803tghsn4kleoqv&response_type=code&redirect_uri=https://mfraggy25.github.io/MeetNGreet/\";\n//       return null;\n//     }\n\n//     return getOrRenewAccessToken(\"get\", code);\n//   }\n\n//   const lastSavedTime = localStorage.getItem(\"last_saved_time\");\n\n//   if (accessToken && Date.now() - lastSavedTime < 3600000) {\n//     return accessToken;\n//   }\n\n//   const refreshToken = localStorage.getItem(\"refresh_token\");\n\n//   return getOrRenewAccessToken(\"renew\", refreshToken);\n// }\n\n// async function getOrRenewAccessToken(type, key) {\n//   let url;\n//   if (type === \"get\") {\n//     // Lambda endpoint to get token by code\n//     url =\n//       \"https://ba11891z8a.execute-api.us-east-2.amazonaws.com/dev/api/token/\" +\n//       key;\n//   } else if (type === \"renew\") {\n//     // Lambda endpoint to get token by refresh_token\n//     url =\n//       \"https://ba11891z8a.execute-api.us-east-2.amazonaws.com/dev/api/refresh_token/\" +\n//       key;\n//   }\n\n//   // Use Axios to make a GET request to the endpoint\n//   const tokenInfo = await axios.get(url);\n\n//   // Save tokens to localStorage together with a timestamp\n//   localStorage.setItem(\"access_token\", tokenInfo.data.access_token);\n//   localStorage.setItem(\"refresh_token\", tokenInfo.data.refresh_token);\n//   localStorage.setItem(\"last_saved_time\", Date.now());\n\n//   // Return the access_token\n//   return tokenInfo.data.access_token;\n// }\n\n// export { getSuggestions, getEvents, getAccessToken };\n","// import React, { Component } from \"react\";\n// import { getSuggestions } from \"./api\";\n\n// class CitySearch extends Component {\n//   state = {\n//     query: \" \",\n//     suggestions: [],\n//   };\n\n//   handleInputChanged = (event) => {\n//     const value = event.target.value;\n//     this.setState({ query: value });\n//     getSuggestions(value).then((suggestions) => this.setState({ suggestions }));\n//   };\n\n//   handleItemClicked = (value, lat, lon) => {\n//     this.setState({ query: value, suggestions: [] });\n//     this.props.updateEvents(lat, lon);\n//   };\n\n//   render() {\n//     return (\n//       <div className=\"CitySearch\">\n//         <input\n//           type=\"text\"\n//           className=\"city\"\n//           value={this.state.query}\n//           onChange={this.handleInputChanged}\n//         />\n//         <ul className=\"suggestions\">\n//           {this.state.suggestions.map((item) => (\n//             <li\n//               key={item.name_string}\n//               onClick={() => this.handleItemClicked(item.name_string)}\n//             >\n//               {item.name_string}\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//     );\n//   }\n// }\n\n// export default CitySearch;\n\n// old code\n\n// import React, { Component } from \"react\";\n// import { getSuggestions } from \"./api\";\n// import { InfoAlert } from \"./Alert\";\n\n// class CitySearch extends Component {\n//   state = {\n//     query: \"\",\n//     suggestions: [],\n//   };\n\n//   handleInputChanged = (event) => {\n//     const value = event.target.value;\n//     this.setState({ query: value });\n//     getSuggestions(value).then((suggestions) => {\n//       this.setState({ suggestions });\n\n//       if (value && suggestions.length === 0) {\n//         this.setState({\n//           infoText:\n//             \"We can not find the city you are looking for. Please try another city\",\n//         });\n//       } else {\n//         this.setState({\n//           infoText: \"\",\n//         });\n//       }\n//     });\n//   };\n\n//   handleItemClicked = (value, lat, lon) => {\n//     this.setState({ query: value, suggestions: [] });\n//     this.props.updateEvents(lat, lon);\n//   };\n\n//   render() {\n//     return (\n//       <div className=\"CitySearch\">\n//         <InfoAlert text={this.state.infoText} />\n//         <input\n//           type=\"text\"\n//           className=\"city\"\n//           onChange={this.handleInputChanged}\n//           value={this.state.query}\n//         />\n//         <ul className=\"suggestions\">\n//           {this.state.suggestions.map((item) => (\n//             <li\n//               key={item.name_string}\n//               onClick={() =>\n//                 this.handleItemClicked(item.name_string, item.lat, item.lon)\n//               }\n//             >\n//               {item.name_string}\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//     );\n//   }\n// }\n\n// export default CitySearch;\n\n//new code\n\nimport React, { Component } from \"react\";\nimport { getSuggestions } from \"./api\";\nimport { InfoAlert } from \"./Alert\";\n\nclass CitySearch extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      query: \"\",\n      suggestions: [],\n      infoText: \"\",\n    };\n    // this.updateEvents = this.updateEvents.bind(this);\n  }\n\n  handleInputChanged = (event) => {\n    const value = event.target.value;\n    this.setState({ query: value });\n    getSuggestions(value).then((suggestions) => {\n      this.setState({ suggestions });\n      if (value && suggestions.length === 0) {\n        this.setState({\n          infoText:\n            \"We can not find the city you are looking for. Please try another city\",\n        });\n      } else {\n        this.setState({ infoText: \"\" });\n      }\n    });\n  };\n\n  handleItemClicked = (value, lat, lon) => {\n    this.setState({ query: value, suggestions: [] });\n    this.props.updateEvents(lat, lon);\n  };\n\n  // componentDidMount() {\n  //   if (this.state.query === \"\") {\n  //     // console.log(\"here\");\n\n  //     this.props.updateEvents(null, null, null);\n  //   }\n  // }\n\n  render() {\n    return (\n      <div className=\"CitySearch\">\n        <InfoAlert text={this.state.infoText} />\n        <input\n          type=\"text\"\n          className=\"city\"\n          value={this.state.query}\n          onChange={this.handleInputChanged}\n        />\n        <ul className=\"suggestions\">\n          {this.state.suggestions.map((item) => (\n            <li\n              key={item.name_string}\n              onClick={() =>\n                this.handleItemClicked(item.name_string, item.lat, item.lon)\n              }\n            >\n              {item.name_string}\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default CitySearch;\n","import React, { Component } from \"react\";\n\nclass Event extends Component {\n  state = {\n    showDetails: false,\n  };\n  handleShowDetails = () => {\n    if (this.state.showDetails === false) {\n      this.setState({ showDetails: true });\n    } else {\n      this.setState({ showDetails: false });\n    }\n  };\n\n  render() {\n    const showDetails = this.state.showDetails;\n\n    return (\n      <div className=\"event\">\n        <div className=\"event__Overview\">\n          <p className=\"event__Overview--name\">{this.props.event.name}</p>\n          <p className=\"event__Overview--localDate\">\n            {this.props.event.local_date}\n          </p>\n          <button onClick={() => this.handleShowDetails()}>show details</button>\n        </div>\n        {showDetails && (\n          <div className=\"event__Details\">\n            <p className=\"event__Details--description\">\n              {this.props.event.description}\n            </p>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Event;\n\n// import React, { Component } from \"react\";\n\n// class Event extends Component {\n//   state = {\n//     showDetails: false,\n//   };\n\n//   handleShowDetails = () => {\n//     if (this.state.showDetails === false) {\n//       this.setState({ showDetails: true });\n//     } else {\n//       this.setState({ showDetails: false });\n//     }\n//   };\n\n//   render() {\n//     const showDetails = this.state.showDetails;\n\n//     return (\n//       <div className=\"event\">\n//         <div className=\"event__Overview\">\n//           <p className=\"event__Overview--name\">{this.props.event.name}</p>\n//           <p className=\"event__Overview--localDate\">\n//             {this.props.event.local_date}\n//           </p>\n//           <button\n//             className=\"details-btn\"\n//             onClick={() => this.handleShowDetails()}\n//           >\n//             show details\n//           </button>\n//         </div>\n//         {showDetails && (\n//           <div className=\"event__Details\">\n//             <p className=\"event__Details--description\">\n//               {this.props.event.description}\n//             </p>\n//           </div>\n//         )}\n//       </div>\n//     );\n//   }\n// }\n\n// export default Event;\n","import React, { Component } from \"react\";\nimport Event from \"./Event\";\n\nclass EventList extends Component {\n  render() {\n    return (\n      <ul className=\"EventList\">\n        {this.props.events.map((event) => (\n          <li key={event.id}>\n            <Event event={event} />\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nexport default EventList;\n","import React, { Component } from \"react\";\n\nimport NumberOfEvents from \"./NumberOfEvents\";\nimport CitySearch from \"./CitySearch\";\nimport EventList from \"./EventList\";\nimport { getEvents } from \"./api\";\nimport \"./App.css\";\n\nclass App extends Component {\n  componentDidMount() {\n    getEvents().then((response) => this.setState({ events: response }));\n  }\n\n  state = {\n    events: [],\n    page: null,\n    defaultCity: \"\",\n    lat: null,\n    lon: null,\n  };\n\n  updateEvents = (lat, lon, page) => {\n    if (lat && lon) {\n      getEvents(lat, lon, this.state.page).then((response) =>\n        this.setState({ events: response, lat, lon })\n      );\n    } else if (page) {\n      getEvents(this.state.lat, this.state.lon, page).then((response) =>\n        this.setState({ events: response, page })\n      );\n    } else {\n      getEvents(\n        this.state.lat,\n        this.state.lon,\n        this.state.page\n      ).then((response) => this.setState({ events: response }));\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <CitySearch updateEvents={this.updateEvents} />\n        <EventList events={this.state.events} />\n        {\n          <NumberOfEvents\n            updateEvents={this.updateEvents}\n            numberOfEvents={this.state.events.length}\n            lat={this.state.lat}\n            lon={this.state.lon}\n          />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}